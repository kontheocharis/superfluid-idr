
let Nat = (A : U) -> A -> (A -> A) -> A;

let zero : Nat = \A z s => z;

let succ : Nat -> Nat = \n A z s => s (n A z s);

let rec : (A : U) -> A -> (A -> A) -> Nat -> A = \A z s n => n A z s;

let add : Nat -> Nat -> Nat = \a b => rec Nat b succ a;

add (succ zero) (succ (succ zero))
