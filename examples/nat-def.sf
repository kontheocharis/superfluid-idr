
data Nat {
  zero : Nat,
  succ (n : Nat) : Nat
}

-- def Type : U = U

-- def Nat : Type = (A : U) -> A -> (A -> A) -> A

-- def zero : Nat = \A z s => z

-- def succ (n : Nat) : Nat = \A z s => s (n A z s)

-- def elim (A : U) (z : A) (s : A -> A) (n : Nat) : A = n A z s

-- def add : Nat -> Nat -> Nat = \a b => elim Nat b succ a

-- def mul : Nat -> Nat -> Nat = \a b => elim Nat zero (add a) b

-- def exp : Nat -> Nat -> Nat = \a b => elim Nat (succ zero) (mul a) b

-- def two : Nat = succ (succ zero)

-- def four : Nat = add two two

-- def eight : Nat = mul two four

-- def ten : Nat = add eight two

-- def twenty : Nat = mul two ten
